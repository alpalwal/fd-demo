version: '2'
services:
#  proxy:
#    container_name: nginx
#    image: nginx:mainline-alpine
#    ports:
#        - "80:80"

  rabbit:
    container_name: rabbit
    image: rabbitmq:3-management
    ports:
      - '5672:5672'
      - '15672:15672'
    expose:
      - 8080
      - 5672

  riak:
    container_name: riak
    image: lapax/riak:latest
    ports:
      - '8087:8087'
    environment:
      storage_backend: leveldb
      platform_data_dir: /data/riak
    volumes:
      - ./data/riak:/data/riak

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:1.7.5
    command: elasticsearch -Des.cluster.name=es_flockdata
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - fd-es:/usr/share/elasticsearch/data
    expose:
      - 9200
      - 9300

  kibana:
    container_name: kibana
    image: kibana:4.1.6
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: 'http://elasticsearch:9200'
    depends_on:
      - elasticsearch
      - fd-search

  fd-client:
    container_name: fd-client
    image: flockdata/fd-client:latest
    # docker-compose run fd-client fdregister -u=demo:123 -l=demo
    # docker-compose run fd-client fdcountries -u=demo:123
    environment:
      org.fd.engine.api: 'http://fd-engine:8080'
      org.fd.client.batchsize: 1
      rabbit.host: rabbit

  fd-engine:
    container_name: fd-engine
    image: flockdata/fd-engine:0.98.2-SNAPSHOT

    ports:
      - '8080:8080'
      - '7474:7474'
    expose:
      - 8080
      - 7474

    volumes:
      - fd-neo:/opt/flockdata/data

    ulimits:
      nofile:
        soft: 40000
        hard: 40000

    environment:
      JAVA_OPTS: "-Xmx2g"
      server.port: 8080
      spring.profiles.active: fd-server,fd-auth-test,discovery

      eureka.client.enabled: 'true'
      spring.cloud.discovery.enabled: 'true'
      org.fd.discovery.url: http://eureka:8761/eureka/

      org.fd.auth.simple.users.demo.pass: 123
      org.fd.auth.simple.users.demo.roles: FD_USER;FD_ADMIN

      rabbit.host: rabbit
      rabbit.port: 5672
      org.fd.search.api: http://fd-search:8081
      org.fd.store.api: http://fd-store:8082
      org.neo4j.path: /opt/flockdata
      org.neo4j.server.database.location: /opt/flockdata/data
      org.fd.engine.fortress.store: 'true'
      cors.allowOrigin:  http://docker-ip,http://192.168.99.100,http://127.0.0.1:9000,http://localhost:9000,chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop

    depends_on:
      - rabbit
      - eureka
      - fd-search
      - fd-store

    links:
      - fd-search
      - rabbit
      - eureka

  fd-search:
    container_name: fd-search
    image: flockdata/fd-search:0.98.2-SNAPSHOT
    ports:
     - '8081:8081'
    expose:
      - 8081

    depends_on:
      - rabbit
      - eureka
      - elasticsearch

    links:
      - rabbit
      - elasticsearch

    ulimits:
      nofile:
        soft: 40000
        hard: 40000

    environment:
      server.port: 8081
      spring.profiles.active: fd-server,fd-no-auth,discovery
      JAVA_OPTS: "-Xmx2g"

      eureka.client.enabled: 'true'
      spring.cloud.discovery.enabled: 'true'
      org.fd.discovery.url: http://eureka:8761/eureka/

      rabbit.host: rabbit
      rabbit.port: 5672

      org.fd.engine.url: 'http://fd-engine:8080'
      #Is the node going to be a client node which means it will hold no data
      org.fd.search.es.transportOnly: "true"
      # A local node is a node that uses a local (JVM level) discovery and transport
      org.fd.search.es.local: "false"
      # , serparated list of hosts to connect to if transportOnly == true
      es.nodes: elasticsearch:9300
      es.clustername: 'es_flockdata'
      es.path.home: /opt/flockdata
      es.path.data: /opt/flockdata/data

  fd-store:
    container_name: fd-store
    image: flockdata/fd-store:0.98.2-SNAPSHOT
    ports:
     - '8082:8082'

    expose:
      - 8082

    depends_on:
      - rabbit
      - eureka
      - riak
    environment:
      JAVA_OPTS: "-Xmx1g"
      spring.profiles.active: fd-no-auth,discovery,riak
      server.port: 8082
      rabbit.host: rabbit
      rabbit.port: 5672
      eureka.client.enabled: 'true'
      spring.cloud.discovery.enabled: 'true'
      org.fd.discovery.url: http://eureka:8761/eureka/

      riak.hosts: riak
      es.clustername: 'es_flockdata'

  fd-view:
      container_name: fd-view
      image: flockdata/fd-view:latest
      ports:
        - '80:80'
      depends_on:
        - fd-engine

      #ToDo: Figure out how to pass the URL to find fd-engine for the user

# Monitoring tools
  eureka:
    container_name: fd-discovery
    image: flockdata/fd-discovery:0.98.1a
    ports:
      - '8761:8761'

    environment:
      eureka.server.enable-self-preservation: 'false'

  #config:
  #  container_name: fd-config
  #  image: flockdata/fd-config:latest
  #  ports:
  #    - '8888:8888'

  scope:
    image: weaveworks/scope:latest
    container_name: weave-scope
    volumes:
      - '/var/run/:/var/run:rw'
    command:
      - '--probe.docker'
      - 'true'
    network_mode: 'host'
    pid: 'host'
    ports:
      - '4040:4040'
    privileged: true

#MySQL
#https://dzone.com/articles/docker-compose-environment-variable-binding-exampl

networks:
  default:
    # Use the overlay driver for multi-host communication
    driver: bridge

## You need to create your volumes. Something along the lines of:
## docker volume create --name fd-neo
volumes:
  fd-es:
    external: true

  fd-neo:
    external: true

  fd-riak:
    external: true

# Cleaningup unused docker stuff
#    http://blog.yohanliyanage.com/2015/05/docker-clean-up-after-yourself/